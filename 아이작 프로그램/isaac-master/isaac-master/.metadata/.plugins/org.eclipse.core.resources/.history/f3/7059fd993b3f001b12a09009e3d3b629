package character;



import java.awt.Color;
import java.awt.Font;
import java.util.Vector;

import javax.swing.JFrame;
import javax.swing.JLabel;

import SpriteSheet.SpriteSheet;
import bullet.BulletControl;
import item.Bomb;
import item.Item;
import lombok.Data;
import monster.Monster;
import objectSize.BombSize;
import objectSize.DoorSize;
import objectSize.ExplosionSize;
import objectSize.Gap;
import objectSize.IsaacSize;
import objectSize.LifeSize;
import objectSize.StructureSize;
import objectSize.ViewDirect;
import structure.Door;
import structure.Rock;
import structure.Spike;
import structure.Structure;

@Data

public class Isaac extends Character{
	
	private final static String TAG = "Isaac : ";
	private Isaac isaac = this;
	
	private Vector<SpriteSheet> ssLifes;
	private SpriteSheet ssHead, ssBody;
	private SpriteSheet ssTotal;	// 전신
	private SpriteSheet ssBomb;
	private SpriteSheet ssExplosion;

	private Vector<Structure> structures;
	private Vector<Monster> monster;
	private Vector<Door> door;
	private Vector<Item> items;
	
	private int xPlusBody = 7, yPlusBody = 30;
	private int yTotalSize; // 아이작 전신 시작위치 Y
	private boolean isOnSpike = false;
	private JLabel laKey;
	private JLabel laBomb;
	private int keyCount = 0;
	private int bombCount = 0;
	private int moveSpeed = 12;
	private boolean isBomb = false;
	
	public Isaac(JFrame app, Vector<Structure> structures, Vector<Monster> monster, Vector<Item> items, Vector<Door> door) {
		super(app);
		System.out.println(TAG + "make Isaac");
		init(structures, monster, items, door);
		setting();
		batch();
	}
	public void init(Vector<Structure> structures, Vector<Monster> monster, Vector<Item> items, Vector<Door> door) {
		ssHead = new SpriteSheet("isaac/isaac.png", "isaacssHead", 0, 0, IsaacSize.HEADWIDTH, IsaacSize.HEADHEIGHT);
		ssBody = new SpriteSheet("isaac/isaac.png", "isaacBody", 0, (IsaacSize.HEADHEIGHT + Gap.ROWGAP), IsaacSize.BODYWIDTH, IsaacSize.BODYHEIGHT);
		ssTotal = new SpriteSheet("isaac/isaac.png", "isaacBody", 0, yTotalSize, IsaacSize.TOTALWIDTH, IsaacSize.TOTALHEIGHT);
		ssBomb = new SpriteSheet("item/bomb.png", "bomb", 0, BombSize.PICKHEIGHT + Gap.ROWGAP, BombSize.SETBOMBWIDTH, BombSize.SETBOMBHEIGHT);
		ssExplosion = new SpriteSheet("item/explosion.png", "explosion", 0, 0, ExplosionSize.WIDTH, ExplosionSize.HEIGHT);
		yTotalSize = IsaacSize.HEADHEIGHT + IsaacSize.BODYHEIGHT * 4 + Gap.ROWGAP * 5;
		ssLifes = new Vector<SpriteSheet>();
		this.monster = monster;
		this.door = door;
		this.structures = structures;
		this.items = items;
		for(int i = 0; i < 5; i++) {
			this.ssLifes.add(new SpriteSheet("isaac/life.png", "life", 0, 0, LifeSize.WIDTH, LifeSize.HEIGHT));
		}
		laKey = new JLabel(Integer.toString(keyCount));
		laBomb = new JLabel(Integer.toString(bombCount));
	}
	public void setting() {
		setBulletControl(new BulletControl(getApp(), structures, isaac, monster));
		setViewDirect(ViewDirect.DOWN);
		setXChar(480);	// 아이작 초반 x위치 480 설정
		setYChar(430);	// 아이작 초반 y위치 430 설정
		setAttackDamge(1);	// 아이작 공격력 1 세팅
		setLife(5);	//	생명력 6 설정
		setMaxLife(5);	//	최대 생명력 6설정
		setXCenter(getXChar() + IsaacSize.HEADWIDTH / 2);
		setYCenter(getYChar() + IsaacSize.HEADHEIGHT);
		ssHead.drawObject(getXChar(), getYChar());	// 아이작 머리 위치 설정
		ssBody.drawObject(getXChar() + xPlusBody, getYChar() + yPlusBody);	//아이작 몸 위치 설정
		for(int i = 0; i < 5; i++) {
			ssLifes.get(i).drawObject(10 + (i * 30), 10);
		}
		laKey.setSize(20, 20);
		laKey.setLocation(60, 50);
		laKey.setFont(new Font("바탕", Font.ITALIC, 25));
		laKey.setForeground(Color.WHITE);
		laBomb.setSize(20, 20);
		laBomb.setLocation(60, 93);
		laBomb.setFont(new Font("바탕", Font.ITALIC, 25));
		laBomb.setForeground(Color.WHITE);
	}
	public void batch() {
		getApp().add(ssHead, 0);	// 머리 배치
		getApp().add(ssBody, 1);	// 몸 배치
		for(int i = 0; i < 5; i++) {
			getApp().add(ssLifes.get(i), 1);
		}
		getApp().add(laKey);
		getApp().add(laBomb);
	}
	
	@Override
	public void moveRight() {
		new Thread(new Runnable() {
			@Override
			public void run() {
				if(isRight() == false) {
//					System.out.println(TAG + "오른쪽으로 움직임");
					setRight(true);
					setViewDirect(ViewDirect.RIGHT);
					while(isRight()) {
						// 벽 충돌 검사
						if(getXChar() + IsaacSize.BODYWIDTH > 810) {
							setRight(false);
							refreshDirect();
							break;
						}
						boolean isRockCollision = false;
						// 바위 충돌 검사.
						for(int i = 0; i < structures.size(); i++) {
							if(!structures.get(i).isBroken() && structures.get(i).getSsStructure().getGubun() == "rock") {
								if(getXCenter() + (IsaacSize.HEADWIDTH / 2) > structures.get(i).getXStructure() && getXCenter() < structures.get(i).getXStructure() + StructureSize.WIDTH 
									&& getYCenter() + IsaacSize.HEADHEIGHT - yPlusBody > structures.get(i).getYStructure() && getYCenter() < structures.get(i).getYStructure() + StructureSize.HEIGHT) {
									isRockCollision = true;
									break;
								}
							}
						}
						if(isRockCollision) {
							setRight(false);
							refreshDirect();
							break;
						}
						// 바위 충돌 검사. 끝
						getItem();
						// spike 밟을 떄
						for(int i = 0; i < structures.size(); i++) {
							if(!structures.get(i).isBroken() && structures.get(i).getSsStructure().getGubun() == "spike") {
								if(getXCenter() + (IsaacSize.HEADWIDTH / 2) > structures.get(i).getXStructure() && 
										getXCenter() < structures.get(i).getXStructure() + StructureSize.WIDTH && 
										getYCenter() + IsaacSize.HEADHEIGHT - yPlusBody > structures.get(i).getYStructure() && 
										getYCenter() < structures.get(i).getYStructure() + StructureSize.HEIGHT) {
									getSpikeDamage();
								}
							}
						}
						setXChar(getXChar() + 1);	
						setXCenter(getXCenter() + 1);
						moveMotion();
						try {
							Thread.sleep(moveSpeed);
						} catch (Exception e) {
							e.printStackTrace();
						}
					}
					ssBody.setXPos(0);
					ssHead.drawObject(getXChar(), getYChar());
					ssBody.drawObject(getXChar() + xPlusBody, getYChar() + yPlusBody);
				}
			}
		}).start();
	}
	@Override
	public void moveLeft() {
		new Thread(new Runnable() {
			@Override
			public void run() {
				if(isLeft() == false) {
//					System.out.println(TAG + "왼쪽으로 움직임");
					setLeft(true);
					setViewDirect(ViewDirect.LEFT);
					while(isLeft()) {
						if(getXChar() < 130) {
							setLeft(false);	
							refreshDirect();
							break;
						}
						boolean isRockCollision = false;
						// 바위 충돌 검사.
						for(int i = 0; i < structures.size(); i++) {
							if(!structures.get(i).isBroken() && structures.get(i).getSsStructure().getGubun() == "rock") {
								if(getXCenter() > structures.get(i).getXStructure() && 
									getXCenter() - (IsaacSize.HEADWIDTH / 2) < structures.get(i).getXStructure() + StructureSize.WIDTH && 
									getYCenter() + IsaacSize.HEADHEIGHT - yPlusBody > structures.get(i).getYStructure() && 
									getYCenter() < structures.get(i).getYStructure() + StructureSize.HEIGHT) {
									isRockCollision = true;
									break;
								}
							}
						}
						if(isRockCollision) {
							setLeft(false);
							refreshDirect();
							break;
						}
						// 바위 충돌 검사. 끝
						getItem();
						// spike 밟을 떄
						for(int i = 0; i < structures.size(); i++) {
							if(!structures.get(i).isBroken() && structures.get(i).getSsStructure().getGubun() == "spike") {
								if(getXCenter() > structures.get(i).getXStructure() && 
									getXCenter() - (IsaacSize.HEADWIDTH / 2) < structures.get(i).getXStructure() + StructureSize.WIDTH && 
									getYCenter() + IsaacSize.HEADHEIGHT - yPlusBody > structures.get(i).getYStructure() && 
									getYCenter() < structures.get(i).getYStructure() + StructureSize.HEIGHT) {
									getSpikeDamage();
								}
							}
						}
								
						setXChar(getXChar() - 1);
						setXCenter(getXCenter() - 1);
						moveMotion();
						try {
							Thread.sleep(moveSpeed);
						} catch (Exception e) {
							e.printStackTrace();
						}
					}
					ssBody.setXPos(0);
					ssHead.drawObject(getXChar(), getYChar());
					ssBody.drawObject(getXChar() + xPlusBody, getYChar() + yPlusBody);
				}
			}
		}).start();
	}
	
	@Override
	public void moveDown() {
		new Thread(new Runnable() {
			@Override
			public void run() {
				if(isDown() == false) {
//					System.out.println(TAG + "아래쪽으로 움직임");
					setDown(true);
					setViewDirect(ViewDirect.DOWN);
					while(isDown()) {
						if(getYChar() > 440) {
							setDown(false);
							refreshDirect();
							break;
						}
						boolean isRockCollision = false;
						// 바위 충돌 검사.
						for(int i = 0; i < structures.size(); i++) {
							if(!structures.get(i).isBroken() && structures.get(i).getSsStructure().getGubun() == "rock") {
								if(getXCenter() + (IsaacSize.HEADWIDTH / 2) > structures.get(i).getXStructure() + 5 && 
									getXCenter() - (IsaacSize.HEADWIDTH / 2) < structures.get(i).getXStructure() + StructureSize.WIDTH - 5 && 
									getYCenter() + (IsaacSize.HEADHEIGHT- yPlusBody) + 5 > structures.get(i).getYStructure() && 
									getYCenter() < structures.get(i).getYStructure() + StructureSize.HEIGHT) {
									isRockCollision = true;
									break;
								}
							}
						}
						if(isRockCollision) {
							setUp(false);
							refreshDirect();
							break;
						}
						// 바위 충돌 검사. 끝
						getItem();
						// spike밟을 때
						for(int i = 0; i < structures.size(); i++) {
							if(!structures.get(i).isBroken() && structures.get(i).getSsStructure().getGubun() == "spike") {
								if(getXCenter() + (IsaacSize.HEADWIDTH / 2) > structures.get(i).getXStructure() + 5 && 
									getXCenter() - (IsaacSize.HEADWIDTH / 2) < structures.get(i).getXStructure() + StructureSize.WIDTH - 5&& 
									getYCenter() + (IsaacSize.HEADHEIGHT- yPlusBody) + 5 > structures.get(i).getYStructure() && 
									getYCenter() < structures.get(i).getYStructure() + StructureSize.HEIGHT) {
									getSpikeDamage();
								}
							}
						}
						setYChar(getYChar() + 1);
						setYCenter(getYCenter() + 1);
						moveMotion();
						try {
							Thread.sleep(moveSpeed);
						} catch (Exception e) {
							e.printStackTrace();
						}
					}
					ssBody.setXPos(0);
					ssHead.drawObject(getXChar(), getYChar());
					ssBody.drawObject(getXChar() + xPlusBody, getYChar() + yPlusBody);
				}
			}
		}).start();
	}
	@Override
	public void moveUp() {
		new Thread(new Runnable() {
			@Override
			public void run() {
				if(isUp() == false) {
//					System.out.println(TAG + "위쪽으로 움직임");
					setUp(true);
					setViewDirect(ViewDirect.UP);
					while(isUp()) {
						if(getYChar() < 100) {
							setUp(false);
							refreshDirect();
							break;
						}
						boolean isRockCollision = false;
						// 바위 충돌 검사.
						for(int i = 0; i < structures.size(); i++) {
							if(!structures.get(i).isBroken() && structures.get(i).getSsStructure().getGubun() == "rock") {
								if(getXCenter() + (IsaacSize.HEADWIDTH / 2) > structures.get(i).getXStructure() + 5 && 
									getXCenter() - (IsaacSize.HEADWIDTH / 2) < structures.get(i).getXStructure() + StructureSize.WIDTH - 5 && 
									getYCenter()> structures.get(i).getYStructure() && 
									getYCenter() + (IsaacSize.BODYHEIGHT - yPlusBody)  < structures.get(i).getYStructure() + StructureSize.HEIGHT ) {
									isRockCollision = true;
									break;
								}
							}
						}
						if(isRockCollision) {
							setUp(false);
							refreshDirect();
							break;
						}
						// 바위 충돌 검사. 끝
						getItem();
						// spike밟을 때
						for(int i = 0; i < structures.size(); i++) {
							if(!structures.get(i).isBroken() && structures.get(i).getSsStructure().getGubun() == "spike") {
								if(getXCenter() + (IsaacSize.HEADWIDTH / 2) > structures.get(i).getXStructure() + 5 && 
									getXCenter() - (IsaacSize.HEADWIDTH / 2) < structures.get(i).getXStructure() + StructureSize.WIDTH - 5 && 
									getYCenter()> structures.get(i).getYStructure() && 
									getYCenter() + (IsaacSize.BODYHEIGHT - yPlusBody)  < structures.get(i).getYStructure() + StructureSize.HEIGHT ) {
									getSpikeDamage();
								}
							}
						}
						setYChar(getYChar() - 1);
						setYCenter(getYCenter() - 1);
						moveMotion();
						try {
							Thread.sleep(moveSpeed);
						} catch (Exception e) {
							e.printStackTrace();
						}
					}
					ssBody.setXPos(0);
					ssHead.drawObject(getXChar(), getYChar());
					ssBody.drawObject(getXChar() + xPlusBody, getYChar() + yPlusBody);
				}
			}
		}).start();
	}
	@Override
	public void moveMotion() {
		new Thread(new Runnable() {
			@Override
			public void run() {
				int motion = 0;
				if(isMoveStart() == false) {
					setMoveStart(true);
					while(!isDead()) {
						if(isDown() && getViewDirect() == ViewDirect.DOWN) {
							if(motion > 9)
								motion = 0;
							ssBody.setXPos((IsaacSize.BODYWIDTH * motion) + (Gap.COLUMNGAP * motion));
							if(getViewDirect() == ViewDirect.DOWN) {
								ssHead.setXPos(0);
								ssBody.setYPos(IsaacSize.HEADWIDTH + Gap.COLUMNGAP);
								ssHead.drawObject(getXChar(), getYChar());
								ssBody.drawObject(getXChar() + xPlusBody, getYChar() + yPlusBody);
								motion += 1;
							}
						}
						else if(isLeft() && getViewDirect() == ViewDirect.LEFT) {
							if(motion > 9)
								motion = 0;
							ssBody.setXPos((IsaacSize.BODYWIDTH * motion) + (Gap.COLUMNGAP * motion));
							if(getViewDirect() == ViewDirect.LEFT) {
								ssHead.setXPos(IsaacSize.HEADWIDTH * 6 + Gap.COLUMNGAP * 6);
								ssBody.setYPos(IsaacSize.HEADHEIGHT + IsaacSize.BODYHEIGHT * 2 + Gap.ROWGAP * 3);
								ssHead.drawObject(getXChar(), getYChar());
								ssBody.drawObject(getXChar() + xPlusBody, getYChar() + yPlusBody);
								motion += 1;
							}
						}
						else if(isUp() && getViewDirect() == ViewDirect.UP) {
							if(motion > 9)
								motion = 0;
							ssBody.setXPos((IsaacSize.BODYWIDTH * motion) + (Gap.COLUMNGAP * motion));
							if(getViewDirect() == ViewDirect.UP) {
								ssHead.setXPos(IsaacSize.HEADWIDTH * 4 + Gap.COLUMNGAP * 4);
								ssBody.setYPos(IsaacSize.HEADWIDTH + Gap.COLUMNGAP);
								ssHead.drawObject(getXChar(), getYChar());
								ssBody.drawObject(getXChar() + xPlusBody, getYChar() + yPlusBody);
								motion += 1;
							}
						}
						else if(isRight() && getViewDirect() == ViewDirect.RIGHT) {
							if(motion > 9)
								motion = 0;
							ssBody.setXPos((IsaacSize.BODYWIDTH * motion) + (Gap.COLUMNGAP * motion));
							if(getViewDirect() == ViewDirect.RIGHT) {
								ssHead.setXPos(IsaacSize.HEADWIDTH * 2 + Gap.COLUMNGAP * 2);	// 머리 이미지 x좌표
								ssBody.setYPos(IsaacSize.HEADHEIGHT + IsaacSize.BODYHEIGHT + Gap.ROWGAP * 2);	// 몸 이미지 y좌표
								ssHead.drawObject(getXChar(), getYChar());
								ssBody.drawObject(getXChar() + xPlusBody, getYChar() + yPlusBody);
								motion += 1;
							}
						}
						
						try {
							Thread.sleep(40);
						} catch (Exception e) {
							e.printStackTrace();
						}
						
					}
				}
			}
		}).start();
	}
	public void refreshDirect() {
		if(isaac.isDown()) {
			isaac.setViewDirect(ViewDirect.DOWN);
		}
		if(isaac.isLeft()) {
			isaac.setViewDirect(ViewDirect.LEFT);
		}
		if(isaac.isUp()) {
			isaac.setViewDirect(ViewDirect.UP);
		}
		if(isaac.isRight()) {
			isaac.setViewDirect(ViewDirect.RIGHT);
		}
	}
	@Override
	public void attack() {
		new Thread(new Runnable() {
			@Override
			public void run() {
					closeEye(isaac.getViewDirect());
					ssHead.drawObject(getXChar(), getYChar());
					try {
						Thread.sleep(300);
					} catch (Exception e) {
						e.printStackTrace();
					}
					openEye(isaac.getViewDirect());
					ssHead.drawObject(getXChar(), getYChar());
					isaac.getBulletControl().addBullet("isaac", isaac.getAttackDamge(), isaac.getViewDirect(), isaac.getXChar(), isaac.getYChar());
			}
		}).start();
	}
	
	public void closeEye(int viewDirect) {
		switch (viewDirect) {
		case 1:	// 보는 방향 아래
			ssHead.setXPos(IsaacSize.HEADWIDTH + Gap.COLUMNGAP);
			break;
		case 2:	// 보는 방향 왼쪽
			ssHead.setXPos(IsaacSize.HEADWIDTH * 7 + Gap.COLUMNGAP * 7);
			break;
		case 3:	// 보는 방향 위
			ssHead.setXPos(IsaacSize.HEADWIDTH * 5 + Gap.COLUMNGAP * 5);
			break;
		case 4:	// 보는 방향 오른쪽
			ssHead.setXPos(IsaacSize.HEADWIDTH * 3 + Gap.COLUMNGAP * 3);
			break;
		}
	}
	public void openEye(int viewDirect) {
		switch (viewDirect) {
		case 1:	// 보는 방향 아래
			ssHead.setXPos(0);
			break;
		case 2:	// 보는 방향 왼쪽
			ssHead.setXPos(IsaacSize.HEADWIDTH * 6 + Gap.COLUMNGAP * 6);
			break;
		case 3:	// 보는 방향 위
			ssHead.setXPos(IsaacSize.HEADWIDTH * 4 + Gap.COLUMNGAP * 4);
			break;
		case 4:	// 보는 방향 오른쪽
			ssHead.setXPos(IsaacSize.HEADWIDTH * 2 + Gap.COLUMNGAP * 2);
			break;
		}
	}
	public void reDrawLife() {
		double currentLife = getLife();
		for(int i = 0; i < 5; i++) {
			if(currentLife >= 1) {
				ssLifes.get(i).setXPos(0);
				currentLife -= 1;
			} else if(currentLife > 0 && currentLife < 1) {
				ssLifes.get(i).setXPos(LifeSize.WIDTH + Gap.COLUMNGAP);
				currentLife -= 0.5;
			} else {
				ssLifes.get(i).setXPos(LifeSize.WIDTH * 2 + Gap.COLUMNGAP * 2);
			}
		}
		for(int i = 0; i < 5; i++) {
			ssLifes.get(i).drawObject(10 + (i * 30), 10);
		}
	}
	public void getSpikeDamage() {
		new Thread(new Runnable() {
			@Override
			public void run() {
				if(isOnSpike == false) {
					isOnSpike = true;
					isaac.setLife(getIsaac().getLife() - 0.5);
					isaac.reDrawLife();
					
					try {
						Thread.sleep(3000);
					} catch (Exception e) {
						e.printStackTrace();
					}
					isOnSpike = false;
				}
			}
		}).start();
	}
	public void useBomb() {
		if(bombCount != 0) {
			bombCount -= 1;
			laBomb.setText(Integer.toString(bombCount));
			if(isBomb == false) {
				isBomb = true;
				bombMotion();
			}
		}
	}
	public void bombMotion() {
		if(isBomb) {
			new Thread(new Runnable() {
				
				@Override
				public void run() {
					int x = getXCenter() - 20;
					int y = getYCenter() - 20;
					getApp().add(ssBomb);
					for(int i = 0; i < 6; i++) {
						ssBomb.setXPos(BombSize.SETBOMBWIDTH * i + Gap.COLUMNGAP * i);
						ssBomb.drawObject(x, y);
						try {
							Thread.sleep(300);
						} catch (InterruptedException e) {
							e.printStackTrace();
						}
					}
					getApp().remove(ssBomb);
					getApp().repaint();
					getApp().add(ssExplosion);
					x -= 20;
					y -= 45;
					int xBombCenter = x + BombSize.SETBOMBWIDTH / 2;
					int yBombCenter = y  + BombSize.SETBOMBHEIGHT / 2;
					for(int i = 0; i < structures.size(); i++) {
						if(!structures.get(i).isBroken() && structures.get(i).getSsStructure().getGubun() == "rock") {
							int xDistance = (structures.get(i).getXStructure() - xBombCenter);
							int yDistance = (structures.get(i).getYStructure() - yBombCenter);
							double distance = Math.sqrt(Math.pow(xDistance, 2) + Math.pow(yDistance, 2));
							System.out.println(distance);
							if(distance < 40) {
								structures.get(i).setBroken(true);
								getApp().remove(structures.get(i).getSsStructure());
								getApp().repaint();
							}
						}
					}
					for(int i = 0; i < 12; i++) {
						ssExplosion.setXPos(ExplosionSize.WIDTH * (i % 4) + Gap.COLUMNGAP * (i % 4));
						ssExplosion.setYPos(ExplosionSize.HEIGHT * (i / 4) + Gap.COLUMNGAP * (i / 4));
						ssExplosion.drawObject(x, y);
						try {
							Thread.sleep(200);
						} catch (InterruptedException e) {
							e.printStackTrace();
						}
					}
					getApp().remove(ssExplosion);
					
				}
			}).start();
			
			isBomb = false;
		}
	}
	public boolean nearItemCheck(Item item) {
		if(getXCenter() > item.getXItem() && 
				getXCenter() < item.getXItem() + item.getSsItem().getWidth() && 
				getYCenter() + IsaacSize.HEADHEIGHT + yPlusBody > item.getYItem() && 
				getYCenter() < item.getYItem() + item.getSsItem().getHeight()) {
			return true;
		}else {
			return false;
		}
	}
	public void getItem() {
		for(int i = 0; i < items.size(); i++) {
			if(items.get(i).isDrop()) {
				if(nearItemCheck(items.get(i))) {
					items.get(i).setDrop(false);
					if(items.get(i).getSsItem().getGubun() == "key") {
						keyCount += 1;
						laKey.setText(Integer.toString(keyCount));
					}else if(items.get(i).getSsItem().getGubun() == "bomb") {
						bombCount += 1;
						laBomb.setText(Integer.toString(bombCount));
					}
					getItemMotion(items.get(i));
				}
			}
			
		}
	}
	public void getItemMotion(Item item) {
		new Thread(new Runnable() {
			@Override
			public void run() {
				getApp().remove(ssHead);
				getApp().remove(ssBody);
				int col = 2;
				for(int i = 0; i < 2; i++) {
					col += i;
					item.getSsItem().drawObject(getXChar() + 15, getYChar() - 10);
					ssTotal.setXPos(IsaacSize.TOTALWIDTH * col + Gap.COLUMNGAP * col);
					ssTotal.setYPos(yTotalSize);
					ssTotal.drawObject(getXChar(), getYChar());
					getApp().add(ssTotal);
					getApp().repaint();
					try {
						Thread.sleep(200);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
				getApp().remove(item.getSsItem());
				getApp().remove(ssTotal);
				getApp().repaint();
				getApp().add(ssHead, 0);	// 머리 배치
				getApp().add(ssBody, 1);	// 몸 배치
			}
		}).start();
		
	}
	public void dead() {
		new Thread(new Runnable() {
			@Override
			public void run() {
				if(isaac.getLife() == 0) {
					getApp().remove(ssHead);
					getApp().remove(ssBody);
					ssTotal.setYPos(yTotalSize + Gap.ROWGAP + IsaacSize.TOTALHEIGHT);
					for(int i = 0; i < 3; i++) {
						ssTotal.setXPos(IsaacSize.TOTALWIDTH * i + Gap.COLUMNGAP * i);
						ssTotal.drawObject(getXChar(), getYChar());
						try {
							Thread.sleep(200);
						} catch (InterruptedException e) {
							e.printStackTrace();
						}
					}
					isaac.setDead(true);
				}
			}
		}).start();
	}
	
}




